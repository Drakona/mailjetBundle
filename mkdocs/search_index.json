{
    "docs": [
        {
            "location": "/", 
            "text": "Mailjet Bundle\n\n\n\n\n\n\n\n\n\n\n\n\nSymfony bundle for handling Mailjet API V3 using this wrapper: \nhttps://github.com/mailjet/mailjet-apiv3-php\n\n\nFeatures\n\n\n\n\n Retrieve \n\\Mailjet\\Client\n to make custom Mailjet API V3 requests\n\n\n \nSwiftMailer Transport integration\n\n\n Synchronize Contact Metadata (Contact Properties) with your config\n\n\n Synchronize your user with Mailjet contact list\n\n\n Use your own userProvider (basic \nFosContactProvider\n included to interface with FosUserBundle)\n\n\n Use lifecycle event to subscribe/unsubscribe/update/delete/changeEmail user from a contact List\n\n\n Register Event API - real time notifications (webhook)\n\n\n\n\nSetup\n\n\nAdd bundle to your project:\n\n\ncomposer require mailjet/mailjet-bundle\n\n\n\nAdd \nMailjet\\MailjetBundle\\MailjetBundle\n to your \nAppKernel.php\n:\n\n\n$bundles = [\n    // ...\n    new Mailjet\\MailjetBundle\\MailjetBundle(),\n];\n\n\n\nMinimal Configuration\n\n\nIn your \nconfig.yml\n:\n\n\nmailjet:\n    api_key:    \n%mailjet.api_key%\n\n    secret_key: \n%mailjet.secret_key%\n\n\n\nToDo\n\n\n\n\nMore unit tests\n\n\nFunctionnal tests\n\n\nOther features like Campaigns, stats, ...\n\n\n\n\nContributing\n\n\nIf you want to contribute to this project, look at \nover here", 
            "title": "Home"
        }, 
        {
            "location": "/#mailjet-bundle", 
            "text": "Symfony bundle for handling Mailjet API V3 using this wrapper:  https://github.com/mailjet/mailjet-apiv3-php", 
            "title": "Mailjet Bundle"
        }, 
        {
            "location": "/#features", 
            "text": "Retrieve  \\Mailjet\\Client  to make custom Mailjet API V3 requests    SwiftMailer Transport integration   Synchronize Contact Metadata (Contact Properties) with your config   Synchronize your user with Mailjet contact list   Use your own userProvider (basic  FosContactProvider  included to interface with FosUserBundle)   Use lifecycle event to subscribe/unsubscribe/update/delete/changeEmail user from a contact List   Register Event API - real time notifications (webhook)", 
            "title": "Features"
        }, 
        {
            "location": "/#setup", 
            "text": "Add bundle to your project:  composer require mailjet/mailjet-bundle  Add  Mailjet\\MailjetBundle\\MailjetBundle  to your  AppKernel.php :  $bundles = [\n    // ...\n    new Mailjet\\MailjetBundle\\MailjetBundle(),\n];", 
            "title": "Setup"
        }, 
        {
            "location": "/#minimal-configuration", 
            "text": "In your  config.yml :  mailjet:\n    api_key:     %mailjet.api_key% \n    secret_key:  %mailjet.secret_key%", 
            "title": "Minimal Configuration"
        }, 
        {
            "location": "/#todo", 
            "text": "More unit tests  Functionnal tests  Other features like Campaigns, stats, ...", 
            "title": "ToDo"
        }, 
        {
            "location": "/#contributing", 
            "text": "If you want to contribute to this project, look at  over here", 
            "title": "Contributing"
        }, 
        {
            "location": "/setup/", 
            "text": "Setup\n\n\nAdd bundle to your project:\n\n\ncomposer require mailjet/mailjet-bundle\n\n\n\nAdd \nMailjet\\MailjetBundle\\MailjetBundle\n to your \nAppKernel.php\n:\n\n\n$bundles = [\n    // ...\n    new Mailjet\\MailjetBundle\\MailjetBundle(),\n];\n\n\n\nMinimal Configuration\n\n\nIn your \nconfig.yml\n:\n\n\nmailjet:\n    api_key:    \n%mailjet.api_key%\n\n    secret_key: \n%mailjet.secret_key%\n\n\n\nMore configuration", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#setup", 
            "text": "Add bundle to your project:  composer require mailjet/mailjet-bundle  Add  Mailjet\\MailjetBundle\\MailjetBundle  to your  AppKernel.php :  $bundles = [\n    // ...\n    new Mailjet\\MailjetBundle\\MailjetBundle(),\n];", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#minimal-configuration", 
            "text": "In your  config.yml :  mailjet:\n    api_key:     %mailjet.api_key% \n    secret_key:  %mailjet.secret_key%  More configuration", 
            "title": "Minimal Configuration"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nYou need to have Mailjet account available\n\n\nconfig.yml\n\n\nDefine a configuration in your \nconfig.yml\n:\n\n\nmailjet:\n    api_key:    \n%mailjet.api_key%\n\n    secret_key: \n%mailjet.secret_key%\n\n    call: true # (Default: true) - Performs the API call or not\n    options:\n        url: \napi.mailjet.com\n # (Default: api.mailjet.com) - domain name of the API\n        version: \nv3\n # (Default: v3) - API version (only working for Mailjet API V3 +)\n        call: true # (Default: true) - turns on(true) / off the call to the API\n        secured: true # (Default: true) - turns on(true) / off the use of 'https'\n    transactionnal:\n        call: true #  (Default: true) - Performs the API call or not\n        options:\n            url: \napi.mailjet.com\n # (Default: api.mailjet.com) - domain name of the API\n            version: \nv3\n # (Default: v3) - API version (only working for Mailjet API V3 +)\n            call: true # (Default: true) - turns on(true) / off the call to the API\n            secured: true # (Default: true) - turns on(true) / off the use of 'https'\n    # route name to handle the callback, if you want to change it\n    event_endpoint_route: app_event_endpoint_route\n    # secret to secure callback\n    event_endpoint_token: \nsecretCode12345678\n\n    lists:\n        listId1:\n            # provider used in full synchronization\n            contact_provider: 'yourapp.provider1'\n        listId2:\n            contact_provider: 'yourapp.provider2'\n        # ...\n    contact_metadata:\n        -\n            name: firstname\n            datatype: str\n        -\n            name: lastname\n            datatype: str\n        -\n            name: postalcode\n            datatype: int\n        -\n            name: rank\n            datatype: int\n        -\n            name: hasavatar\n            datatype: bool\n        -\n            name: lastlogin\n            datatype: datetime\n        -\n            name: createdat\n            datatype: datetime\n        -\n            name: birthdate\n            datatype: datetime\n        # ...\n\n\n\n\nWhere \nlistIdX\n is the list id of your Mailjet lists, and \nyourapp.providerX\n is the key of your provider's service that will provide the contacts that need to be synchronized in Mailjet. See the documentation on create \nyour own Contact provider\n.\n\n\nContact Metadata (Contact Properties)\n\n\n\n\nMailjet FAQ\n\n\nMailjet Documentation\n\n\n\n\nYou can find all parameters in Mailjet documentation.\n\n\nExample:\n\n\ncontact_metadata:\n    -\n        name: firstname\n        datatype: str\n    -\n        name: lastname\n        datatype: str\n    -\n        name: organisation\n        datatype: str\n    -\n        name: town\n        datatype: str\n    -\n        name: postalcode\n        datatype: int\n    -\n        name: gender\n        datatype: str\n    -\n        name: rank\n        datatype: int\n    -\n        name: hasavatar\n        datatype: bool\n    -\n        name: lastlogin\n        datatype: datetime\n    -\n        name: createdat\n        datatype: datetime\n    -\n        name: birthdate\n        datatype: datetime\n\n\n\nAvailable datatype: \nstr, int, float, bool, datetime", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "You need to have Mailjet account available", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configyml", 
            "text": "Define a configuration in your  config.yml :  mailjet:\n    api_key:     %mailjet.api_key% \n    secret_key:  %mailjet.secret_key% \n    call: true # (Default: true) - Performs the API call or not\n    options:\n        url:  api.mailjet.com  # (Default: api.mailjet.com) - domain name of the API\n        version:  v3  # (Default: v3) - API version (only working for Mailjet API V3 +)\n        call: true # (Default: true) - turns on(true) / off the call to the API\n        secured: true # (Default: true) - turns on(true) / off the use of 'https'\n    transactionnal:\n        call: true #  (Default: true) - Performs the API call or not\n        options:\n            url:  api.mailjet.com  # (Default: api.mailjet.com) - domain name of the API\n            version:  v3  # (Default: v3) - API version (only working for Mailjet API V3 +)\n            call: true # (Default: true) - turns on(true) / off the call to the API\n            secured: true # (Default: true) - turns on(true) / off the use of 'https'\n    # route name to handle the callback, if you want to change it\n    event_endpoint_route: app_event_endpoint_route\n    # secret to secure callback\n    event_endpoint_token:  secretCode12345678 \n    lists:\n        listId1:\n            # provider used in full synchronization\n            contact_provider: 'yourapp.provider1'\n        listId2:\n            contact_provider: 'yourapp.provider2'\n        # ...\n    contact_metadata:\n        -\n            name: firstname\n            datatype: str\n        -\n            name: lastname\n            datatype: str\n        -\n            name: postalcode\n            datatype: int\n        -\n            name: rank\n            datatype: int\n        -\n            name: hasavatar\n            datatype: bool\n        -\n            name: lastlogin\n            datatype: datetime\n        -\n            name: createdat\n            datatype: datetime\n        -\n            name: birthdate\n            datatype: datetime\n        # ...  Where  listIdX  is the list id of your Mailjet lists, and  yourapp.providerX  is the key of your provider's service that will provide the contacts that need to be synchronized in Mailjet. See the documentation on create  your own Contact provider .", 
            "title": "config.yml"
        }, 
        {
            "location": "/configuration/#contact-metadata-contact-properties", 
            "text": "Mailjet FAQ  Mailjet Documentation   You can find all parameters in Mailjet documentation.  Example:  contact_metadata:\n    -\n        name: firstname\n        datatype: str\n    -\n        name: lastname\n        datatype: str\n    -\n        name: organisation\n        datatype: str\n    -\n        name: town\n        datatype: str\n    -\n        name: postalcode\n        datatype: int\n    -\n        name: gender\n        datatype: str\n    -\n        name: rank\n        datatype: int\n    -\n        name: hasavatar\n        datatype: bool\n    -\n        name: lastlogin\n        datatype: datetime\n    -\n        name: createdat\n        datatype: datetime\n    -\n        name: birthdate\n        datatype: datetime  Available datatype:  str, int, float, bool, datetime", 
            "title": "Contact Metadata (Contact Properties)"
        }, 
        {
            "location": "/swiftmailer/", 
            "text": "Mailjet SwiftMailer Transport\n\n\nConfiguration\n\n\n    # Swiftmailer Configuration\n    swiftmailer:\n        transport: mailjet\n\n\n\nSend email example\n\n\n$message = \\Swift_Message::newInstance()\n    -\nsetSubject('this is and email')\n    -\nsetFrom(['no-reply@foo.bar' =\n 'Transactionnal'])\n    -\nsetTo('to@foo.bar')\n    -\nsetBody(\n        '\nstrong\nhello world!\n/strong\n',\n        'text/html'\n    );\n\n//Configure Headers\n$headers = $message-\ngetHeaders();\n// Mailjet header\n$headers-\naddTextHeader('X-MJ-CustomID', $this-\ngetName());\n\n// send email\n$this-\nget('mailer')-\nsend($message);\n\n\n\n\nDocumentation\n\n\nMailjetSwiftMailer github", 
            "title": "SwiftMailer"
        }, 
        {
            "location": "/swiftmailer/#mailjet-swiftmailer-transport", 
            "text": "", 
            "title": "Mailjet SwiftMailer Transport"
        }, 
        {
            "location": "/swiftmailer/#configuration", 
            "text": "# Swiftmailer Configuration\n    swiftmailer:\n        transport: mailjet", 
            "title": "Configuration"
        }, 
        {
            "location": "/swiftmailer/#send-email-example", 
            "text": "$message = \\Swift_Message::newInstance()\n    - setSubject('this is and email')\n    - setFrom(['no-reply@foo.bar' =  'Transactionnal'])\n    - setTo('to@foo.bar')\n    - setBody(\n        ' strong hello world! /strong ',\n        'text/html'\n    );\n\n//Configure Headers\n$headers = $message- getHeaders();\n// Mailjet header\n$headers- addTextHeader('X-MJ-CustomID', $this- getName());\n\n// send email\n$this- get('mailer')- send($message);", 
            "title": "Send email example"
        }, 
        {
            "location": "/swiftmailer/#documentation", 
            "text": "MailjetSwiftMailer github", 
            "title": "Documentation"
        }, 
        {
            "location": "/contact-provider/", 
            "text": "Contact Provider\n\n\nAfter \nconfiguring your lists\n in \nconfig.yml\n, you need to create at least one \nProvider\n that will be used by the SyncUser command.\nYour provider should be accessible via a service key (the same you reference in \ncontact_provider\n in your configuration file):\n\n\n    services:\n        yourapp.mailjet.contact_provider1:\n            class: YourApp\\AppBundle\\Mailjet\\MyContactProvider\n            arguments: [@yourapp.user.repository]\n\n\n\nYou provider class should implement \nMailjet\\MailjetBundle\\Provider\\ProviderInterface\n and the method \ngetContacts\n must return an array of \nMailjet\\MailjetBundle\\Model\\Contact\n objects.\n\n\nExample\n\n\nHere is an example of ContactProvider:\n\n\n?php\n\nnamespace YourApp\\App\\Mailjet;\n\nuse Mailjet\\MailjetBundle\\Provider\\ProviderInterface;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\nuse YourApp\\Model\\User\\UserRepository;\nuse YourApp\\Model\\User\\User;\n\nclass ExampleContactProvider implements ProviderInterface\n{\n\n    const PROP_NICKNAME =           'nickname';\n    const PROP_GENDER =             'gender';\n    const PROP_CITY =               'city';\n    const PROP_BIRTHDATE =          'birthdate';\n    const PROP_LAST_ACTIVITY_DATE = 'last_activity';\n    const PROP_REGISTRATION_DATE =  'registration_date';\n\n    protected $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this-\nuserRepository = $userRepository;\n    }\n\n    public function getContacts()\n    {\n        $users = $this-\nuserRepository-\nfindUsers();\n\n        $contacts = array_map(function(User $user) {\n            $userProperties = [\n                self::PROP_NICKNAME =\n $user-\ngetNickname(),\n                self::PROP_GENDER =\n $user-\ngetGender(),\n                self::PROP_CITY =\n $user-\ngetCity(),\n                self::PROP_BIRTHDATE =\n $user-\ngetBirthday() ? $user-\ngetBirthday()-\nformat('Y-m-d') : '',\n                self::PROP_LAST_ACTIVITY_DATE =\n $user-\ngetLastActivity() ? $user-\ngetLastActivity()-\nformat('Y-m-d') : ''\n                self::PROP_REGISTRATION_DATE =\n $user-\ngetRegistrateAt() ? $user-\ngetRegistrateAt()-\nformat('Y-m-d') : ''\n            ];\n\n            $contact = new Contact($user-\ngetEmail(), $user-\ngetUsername(), $userProperties);\n\n            return $contact;\n        }, $users);\n\n        return $contacts;\n    }\n}\n\n\n\nFosContactProvider\n\n\nWe also provide a ready to use provider for FosUserBundle: \nFosContactProvider\n. You just need to register the service into your app:\n\n\n    services:\n        yourapp.mailjet.fos_contact_provider:\n            class: Mailjet\\MailjetBundle\\Provider\\FosContactProvider\n            arguments: [@fos_user.user_manager]\n\n\n\nAfter this, don't forget to add the service key for your list into your \nconfig.yml\n:\n\n\n    ...\n    listId1:\n        contact_provider: 'yourapp.mailjet.fos_contact_provider'\n\n\n\nNote: You need to have \nenabled\n and \nlastlogin\n in your contact properties", 
            "title": "Contact Provider"
        }, 
        {
            "location": "/contact-provider/#contact-provider", 
            "text": "After  configuring your lists  in  config.yml , you need to create at least one  Provider  that will be used by the SyncUser command.\nYour provider should be accessible via a service key (the same you reference in  contact_provider  in your configuration file):      services:\n        yourapp.mailjet.contact_provider1:\n            class: YourApp\\AppBundle\\Mailjet\\MyContactProvider\n            arguments: [@yourapp.user.repository]  You provider class should implement  Mailjet\\MailjetBundle\\Provider\\ProviderInterface  and the method  getContacts  must return an array of  Mailjet\\MailjetBundle\\Model\\Contact  objects.", 
            "title": "Contact Provider"
        }, 
        {
            "location": "/contact-provider/#example", 
            "text": "Here is an example of ContactProvider:  ?php\n\nnamespace YourApp\\App\\Mailjet;\n\nuse Mailjet\\MailjetBundle\\Provider\\ProviderInterface;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\nuse YourApp\\Model\\User\\UserRepository;\nuse YourApp\\Model\\User\\User;\n\nclass ExampleContactProvider implements ProviderInterface\n{\n\n    const PROP_NICKNAME =           'nickname';\n    const PROP_GENDER =             'gender';\n    const PROP_CITY =               'city';\n    const PROP_BIRTHDATE =          'birthdate';\n    const PROP_LAST_ACTIVITY_DATE = 'last_activity';\n    const PROP_REGISTRATION_DATE =  'registration_date';\n\n    protected $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this- userRepository = $userRepository;\n    }\n\n    public function getContacts()\n    {\n        $users = $this- userRepository- findUsers();\n\n        $contacts = array_map(function(User $user) {\n            $userProperties = [\n                self::PROP_NICKNAME =  $user- getNickname(),\n                self::PROP_GENDER =  $user- getGender(),\n                self::PROP_CITY =  $user- getCity(),\n                self::PROP_BIRTHDATE =  $user- getBirthday() ? $user- getBirthday()- format('Y-m-d') : '',\n                self::PROP_LAST_ACTIVITY_DATE =  $user- getLastActivity() ? $user- getLastActivity()- format('Y-m-d') : ''\n                self::PROP_REGISTRATION_DATE =  $user- getRegistrateAt() ? $user- getRegistrateAt()- format('Y-m-d') : ''\n            ];\n\n            $contact = new Contact($user- getEmail(), $user- getUsername(), $userProperties);\n\n            return $contact;\n        }, $users);\n\n        return $contacts;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/contact-provider/#foscontactprovider", 
            "text": "We also provide a ready to use provider for FosUserBundle:  FosContactProvider . You just need to register the service into your app:      services:\n        yourapp.mailjet.fos_contact_provider:\n            class: Mailjet\\MailjetBundle\\Provider\\FosContactProvider\n            arguments: [@fos_user.user_manager]  After this, don't forget to add the service key for your list into your  config.yml :      ...\n    listId1:\n        contact_provider: 'yourapp.mailjet.fos_contact_provider'  Note: You need to have  enabled  and  lastlogin  in your contact properties", 
            "title": "FosContactProvider"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nSynchronize Contact Metadata (Contact Properties)\n\n\nContact Metadata (or Contact Properties) are values you can add to your contacts (for example firstname, birthdate, isenabled, ...).\nYou can use these metadata in your newsletters or to create segments out of them.\n\n\nThis bundle provides a simple way to configure and synchronize these metadata with your Mailjet account.\n\n\nYou just need to configure in your config.yml your \ncontact_metadata\n: \nsee the configuration\n.\n\n\nFinally, you can use this command to synchronize your config with Mailjet:\n\n\nphp app/console mailjet:contactmetadata-sync\n\n\n\nFull synchronization with command\n\n\nYou can synchronize all users of your project with a Mailjet list at once by calling the Symfony command:\n\n\nphp app/console mailjet:user-sync\n\n\n\nIt will get all your User throught your Contact Provider and will add/update all your User to the configured list.\n\n\nYou can use the option \n--follow-sync\n to supervise batch jobs.\n\n\nphp app/console mailjet:user-sync --follow-sync\n\n\n\nNOTE: you must have configured and created \nyour own contact provider\n.\n\n\nUnit synchronization with events\n\n\nIf you want realtime synchronization, you can dispatch custom events on your controllers/managers (or anywhere). The subscribe event can be used both for adding a new contact or updating an existing one. You can fired these events to trigger sync with Mailjet:\n\n\n    ContactEvent::EVENT_SUBSCRIBE = 'mailjet.mailjet.subscribe';\n    ContactEvent::EVENT_UNSUBSCRIBE = 'mailjet.mailjet.unsubscribe';\n    ContactEvent::EVENT_UPDATE = 'mailjet.mailjet.update';\n    ContactEvent::EVENT_DELETE = 'mailjet.mailjet.delete';\n    // NOT IMPLETENTED YET // ContactEvent::EVENT_CHANGE_EMAIL = 'mailjet.mailjet.change_email';\n\n\n\nSubscribe new User\n\n\nHere is an example of a subscribe event dispatch:\n\n\n?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function newUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail(), $user-\ngetNickname(), [\n        'firstname' =\n $user-\ngetFirstname(),\n        'lastname' =\n $user-\ngetLastname(),\n        'city' =\n $user-\ngetCity(),\n        'language' =\n 'fr'\n    ]);\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_SUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nUnsubscribe a User\n\n\nUnsubscribe is simpler, you only need the email:\n\n\n?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function unsubscribeUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail());\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_UNSUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nUpdate a User\n\n\nIf your User changes his information, you can sync with MailChimp:\n\n\n?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function updateUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail(), $user-\ngetNickname(), [\n        'firstname' =\n $user-\ngetFirstname(),\n        'lastname' =\n $user-\ngetLastname(),\n        'city' =\n $user-\ngetCity(),\n        'language' =\n 'fr'\n    ]);\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_UPDATE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nNote: we can't change the address email of a user... MailJet API V3 doesn't permit it so far.\n\n\nDelete a User\n\n\nAnd finally delete a User:\n\n\n?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function deleteUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail());\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_DELETE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nChange User's email address\n\n\n?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\npublic function changeEmailAddress($oldEmail, $newEmail)\n{\n    // ...\n    $contact = new Contact($newEmail);\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_CHANGE_EMAIL,\n        new ContactEvent('your_list_id', $contact, $oldEmail)\n    );\n\n}\n\n\n\nWORKAROUND: remove old, add new\n\n\nRetrieve Mailjet Client Object to make custom MailJet API V3 requests\n\n\nYou can also retrieve the MailJet Client Object which comes from the wrapper \nmailjet/mailjet-apiv3-php\n.\n\n\nThe service key is \nmailjet.client\n.\n\n\nExample:\n\n\n?php\n    use \\Mailjet\\Resources;\n\n    // in any controller action...\n    ...\n    $mailjet = $this-\ncontainer-\nget('mailjet.client');\n\n    // Resources are all located in the Resources class\n    $response = $mailjet-\nget(Resources::$Contact);\n\n    /*\n      Read the response\n    */\n    if ($response-\nsuccess())\n      var_dump($response-\ngetData());\n    else\n      var_dump($response-\ngetStatus());\n\n    ...\n    // Send transactional emails (note: prefer using SwiftMailer to send transactionnal emails)\n\n    $body = [\n        'FromEmail' =\n \npilot@mailjet.com\n,\n        'FromName' =\n \nMailjet Pilot\n,\n        'Subject' =\n \nYour email flight plan!\n,\n        'Text-part' =\n \nDear passenger, welcome to Mailjet! May the delivery force be with you!\n,\n        'Html-part' =\n \nh3\nDear passenger, welcome to Mailjet!\n/h3\nbr /\nMay the delivery force be with you!\n,\n        'Recipients' =\n [['Email' =\n \npassenger@mailjet.com\n]]\n    ];\n\n    $response = $mailjet-\npost(Resources::$Email, ['body' =\n $body]);", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#synchronize-contact-metadata-contact-properties", 
            "text": "Contact Metadata (or Contact Properties) are values you can add to your contacts (for example firstname, birthdate, isenabled, ...).\nYou can use these metadata in your newsletters or to create segments out of them.  This bundle provides a simple way to configure and synchronize these metadata with your Mailjet account.  You just need to configure in your config.yml your  contact_metadata :  see the configuration .  Finally, you can use this command to synchronize your config with Mailjet:  php app/console mailjet:contactmetadata-sync", 
            "title": "Synchronize Contact Metadata (Contact Properties)"
        }, 
        {
            "location": "/usage/#full-synchronization-with-command", 
            "text": "You can synchronize all users of your project with a Mailjet list at once by calling the Symfony command:  php app/console mailjet:user-sync  It will get all your User throught your Contact Provider and will add/update all your User to the configured list.  You can use the option  --follow-sync  to supervise batch jobs.  php app/console mailjet:user-sync --follow-sync  NOTE: you must have configured and created  your own contact provider .", 
            "title": "Full synchronization with command"
        }, 
        {
            "location": "/usage/#unit-synchronization-with-events", 
            "text": "If you want realtime synchronization, you can dispatch custom events on your controllers/managers (or anywhere). The subscribe event can be used both for adding a new contact or updating an existing one. You can fired these events to trigger sync with Mailjet:      ContactEvent::EVENT_SUBSCRIBE = 'mailjet.mailjet.subscribe';\n    ContactEvent::EVENT_UNSUBSCRIBE = 'mailjet.mailjet.unsubscribe';\n    ContactEvent::EVENT_UPDATE = 'mailjet.mailjet.update';\n    ContactEvent::EVENT_DELETE = 'mailjet.mailjet.delete';\n    // NOT IMPLETENTED YET // ContactEvent::EVENT_CHANGE_EMAIL = 'mailjet.mailjet.change_email';", 
            "title": "Unit synchronization with events"
        }, 
        {
            "location": "/usage/#subscribe-new-user", 
            "text": "Here is an example of a subscribe event dispatch:  ?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function newUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail(), $user- getNickname(), [\n        'firstname' =  $user- getFirstname(),\n        'lastname' =  $user- getLastname(),\n        'city' =  $user- getCity(),\n        'language' =  'fr'\n    ]);\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_SUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}", 
            "title": "Subscribe new User"
        }, 
        {
            "location": "/usage/#unsubscribe-a-user", 
            "text": "Unsubscribe is simpler, you only need the email:  ?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function unsubscribeUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail());\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_UNSUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}", 
            "title": "Unsubscribe a User"
        }, 
        {
            "location": "/usage/#update-a-user", 
            "text": "If your User changes his information, you can sync with MailChimp:  ?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function updateUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail(), $user- getNickname(), [\n        'firstname' =  $user- getFirstname(),\n        'lastname' =  $user- getLastname(),\n        'city' =  $user- getCity(),\n        'language' =  'fr'\n    ]);\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_UPDATE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}  Note: we can't change the address email of a user... MailJet API V3 doesn't permit it so far.", 
            "title": "Update a User"
        }, 
        {
            "location": "/usage/#delete-a-user", 
            "text": "And finally delete a User:  ?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function deleteUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail());\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_DELETE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}", 
            "title": "Delete a User"
        }, 
        {
            "location": "/usage/#change-users-email-address", 
            "text": "?php\n\nuse Mailjet\\MailjetBundle\\Event\\ContactEvent;\nuse Mailjet\\MailjetBundle\\Model\\Contact;\n\npublic function changeEmailAddress($oldEmail, $newEmail)\n{\n    // ...\n    $contact = new Contact($newEmail);\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_CHANGE_EMAIL,\n        new ContactEvent('your_list_id', $contact, $oldEmail)\n    );\n\n}  WORKAROUND: remove old, add new", 
            "title": "Change User's email address"
        }, 
        {
            "location": "/usage/#retrieve-mailjet-client-object-to-make-custom-mailjet-api-v3-requests", 
            "text": "You can also retrieve the MailJet Client Object which comes from the wrapper  mailjet/mailjet-apiv3-php .  The service key is  mailjet.client .  Example:  ?php\n    use \\Mailjet\\Resources;\n\n    // in any controller action...\n    ...\n    $mailjet = $this- container- get('mailjet.client');\n\n    // Resources are all located in the Resources class\n    $response = $mailjet- get(Resources::$Contact);\n\n    /*\n      Read the response\n    */\n    if ($response- success())\n      var_dump($response- getData());\n    else\n      var_dump($response- getStatus());\n\n    ...\n    // Send transactional emails (note: prefer using SwiftMailer to send transactionnal emails)\n\n    $body = [\n        'FromEmail' =   pilot@mailjet.com ,\n        'FromName' =   Mailjet Pilot ,\n        'Subject' =   Your email flight plan! ,\n        'Text-part' =   Dear passenger, welcome to Mailjet! May the delivery force be with you! ,\n        'Html-part' =   h3 Dear passenger, welcome to Mailjet! /h3 br / May the delivery force be with you! ,\n        'Recipients' =  [['Email' =   passenger@mailjet.com ]]\n    ];\n\n    $response = $mailjet- post(Resources::$Email, ['body' =  $body]);", 
            "title": "Retrieve Mailjet Client Object to make custom MailJet API V3 requests"
        }, 
        {
            "location": "/event-api/", 
            "text": "Event API: real-time notifications (webhook)\n\n\n\n\nMailjet Dev guide\n\n\nMailjet Event Config\n\n\n\n\nConfiguration\n\n\nYou need to add the webhook routing to your app routing:\n\n\napp/routing.yml\n\n\n# Mailjet webhook route\nmyapp_mailjet_webhook:\n    resource: \n@MailjetBundle/Resources/config/routing.yml\n\n    prefix:   /mailjet\n\n\n\nNote: you can change the prefix as you like.\n\n\nThis will generate an url to the webhook like this: \nhttp://domain.com/mailjet/mailjet-event/endpoint\n\n\nAlso, Mailjet recommand to protect webhook url with a token parameter. So you need to add the secret token to your list in your config.yml\n\n\nconfig.yml\n\n\nmailjet:\n    api_key:    \n%mailjet.api_key%\n\n    secret_key: \n%mailjet.api_secret%\n\n    ...\n    event_endpoint_token: \nthisisTheSecretPass\n\n\n\nNote: To access properly to the webhook function you will have to use the url with the secret parameter: \nhttp://domain.com/mailjet/mailjet-event/endpoint/thisisTheSecretPass\n\n\nRegister callback urls manually\n\n\nYou can set up manually through the Mailjet panel: \nhere\n\n\nYou need to add the correct callback url such as: \nhttp://domain.com/mailjet/mailjet-event/endpoint/thisisTheSecretPass\n\n\nCommand to automatically register callback Urls\n\n\nYou can use the Symfony command to automatically register callback Urls:\n\n\nphp app/console mailjet:event-endpoint http://domain.com\n\n\n\nBy default, this command will register the url to al event Type. You can specify type as options if you want to register to specific event type:\n\n\nphp app/console mailjet:event-endpoint http://domain.com --event-type=open --event-type=unsub\n\n\n\nEvent type list: \n[\"sent\", \"open\", \"click\", \"bounce\", \"blocked\", \"spam\", \"unsub\"]\n\n\nEvents to listen\n\n\nIn order to integrate MailChimp into your app workflow, you can listen to different Event.\n\n\nEvent you can listen:\n\n\nCallbackEvent::EVENT_SENT = 'mailjet.event.sent';\nCallbackEvent::EVENT_OPEN = 'mailjet.event.open';\nCallbackEvent::EVENT_CLICK = 'mailjet.event.click';\nCallbackEvent::EVENT_BOUNCE = 'mailjet.event.bounce';\nCallbackEvent::EVENT_SPAM = 'mailjet.event.spam';\nCallbackEvent::EVENT_BLOCKED = 'mailjet.event.blocked';\nCallbackEvent::EVENT_UNSUB = 'mailjet.event.unsub';\n\n\n\n1- create an Event Listener\n\n\n?php\n\nnamespace AppBundle\\Listener;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nuse Mailjet\\MailjetBundle\\Event\\CallbackEvent;\n\nclass MailjetEventListener implements EventSubscriberInterface\n{\n\n    protected $logger;\n\n\n    public function __construct($logger)\n    {\n        $this-\nlogger = $logger;\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            CallbackEvent::EVENT_SENT =\n 'sent',\n            CallbackEvent::EVENT_OPEN =\n 'open',\n            CallbackEvent::EVENT_CLICK =\n 'click',\n            CallbackEvent::EVENT_BOUNCE =\n 'bounce',\n            CallbackEvent::EVENT_SPAM =\n 'spam',\n            CallbackEvent::EVENT_BLOCKED =\n 'blocked',\n            CallbackEvent::EVENT_UNSUB =\n 'unsub'\n\n        ];\n    }\n\n    public function sent(CallbackEvent $event){\n        $this-\nlogger-\ninfo('sent Event:', $event-\ngetData());\n    }\n\n    public function open(CallbackEvent $event){\n        $this-\nlogger-\ninfo('open Event:', $event-\ngetData());\n    }\n\n    public function click(CallbackEvent $event){\n        $this-\nlogger-\ninfo('click Event:', $event-\ngetData());\n    }\n\n    public function bounce(CallbackEvent $event){\n        $this-\nlogger-\ninfo('bounce Event:', $event-\ngetData());\n    }\n\n    public function spam(CallbackEvent $event){\n        $this-\nlogger-\ninfo('spam Event:', $event-\ngetData());\n    }\n\n    public function blocked(CallbackEvent $event){\n        $this-\nlogger-\ninfo('blocked Event:', $event-\ngetData());\n    }\n\n    public function unsub(CallbackEvent $event){\n        $this-\nlogger-\ninfo('unsub Event:', $event-\ngetData());\n    }\n\n}\n\n\n\n2- Register the listener into services.yml\n\n\nservices:\n    app.listener.mailjet.webhook:\n        class: AppBundle\\Listener\\MailjetEventListener\n        tags:\n            - { name: kernel.event_subscriber }\n        arguments:\n            - @logger\n\n\n\n3- Test with ngrok (or other localhost tunnel)", 
            "title": "Event API (webhook)"
        }, 
        {
            "location": "/event-api/#event-api-real-time-notifications-webhook", 
            "text": "Mailjet Dev guide  Mailjet Event Config", 
            "title": "Event API: real-time notifications (webhook)"
        }, 
        {
            "location": "/event-api/#configuration", 
            "text": "You need to add the webhook routing to your app routing:  app/routing.yml  # Mailjet webhook route\nmyapp_mailjet_webhook:\n    resource:  @MailjetBundle/Resources/config/routing.yml \n    prefix:   /mailjet  Note: you can change the prefix as you like.  This will generate an url to the webhook like this:  http://domain.com/mailjet/mailjet-event/endpoint  Also, Mailjet recommand to protect webhook url with a token parameter. So you need to add the secret token to your list in your config.yml  config.yml  mailjet:\n    api_key:     %mailjet.api_key% \n    secret_key:  %mailjet.api_secret% \n    ...\n    event_endpoint_token:  thisisTheSecretPass  Note: To access properly to the webhook function you will have to use the url with the secret parameter:  http://domain.com/mailjet/mailjet-event/endpoint/thisisTheSecretPass", 
            "title": "Configuration"
        }, 
        {
            "location": "/event-api/#register-callback-urls-manually", 
            "text": "You can set up manually through the Mailjet panel:  here  You need to add the correct callback url such as:  http://domain.com/mailjet/mailjet-event/endpoint/thisisTheSecretPass", 
            "title": "Register callback urls manually"
        }, 
        {
            "location": "/event-api/#command-to-automatically-register-callback-urls", 
            "text": "You can use the Symfony command to automatically register callback Urls:  php app/console mailjet:event-endpoint http://domain.com  By default, this command will register the url to al event Type. You can specify type as options if you want to register to specific event type:  php app/console mailjet:event-endpoint http://domain.com --event-type=open --event-type=unsub  Event type list:  [\"sent\", \"open\", \"click\", \"bounce\", \"blocked\", \"spam\", \"unsub\"]", 
            "title": "Command to automatically register callback Urls"
        }, 
        {
            "location": "/event-api/#events-to-listen", 
            "text": "In order to integrate MailChimp into your app workflow, you can listen to different Event.  Event you can listen:  CallbackEvent::EVENT_SENT = 'mailjet.event.sent';\nCallbackEvent::EVENT_OPEN = 'mailjet.event.open';\nCallbackEvent::EVENT_CLICK = 'mailjet.event.click';\nCallbackEvent::EVENT_BOUNCE = 'mailjet.event.bounce';\nCallbackEvent::EVENT_SPAM = 'mailjet.event.spam';\nCallbackEvent::EVENT_BLOCKED = 'mailjet.event.blocked';\nCallbackEvent::EVENT_UNSUB = 'mailjet.event.unsub';", 
            "title": "Events to listen"
        }, 
        {
            "location": "/event-api/#1-create-an-event-listener", 
            "text": "?php\n\nnamespace AppBundle\\Listener;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nuse Mailjet\\MailjetBundle\\Event\\CallbackEvent;\n\nclass MailjetEventListener implements EventSubscriberInterface\n{\n\n    protected $logger;\n\n\n    public function __construct($logger)\n    {\n        $this- logger = $logger;\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            CallbackEvent::EVENT_SENT =  'sent',\n            CallbackEvent::EVENT_OPEN =  'open',\n            CallbackEvent::EVENT_CLICK =  'click',\n            CallbackEvent::EVENT_BOUNCE =  'bounce',\n            CallbackEvent::EVENT_SPAM =  'spam',\n            CallbackEvent::EVENT_BLOCKED =  'blocked',\n            CallbackEvent::EVENT_UNSUB =  'unsub'\n\n        ];\n    }\n\n    public function sent(CallbackEvent $event){\n        $this- logger- info('sent Event:', $event- getData());\n    }\n\n    public function open(CallbackEvent $event){\n        $this- logger- info('open Event:', $event- getData());\n    }\n\n    public function click(CallbackEvent $event){\n        $this- logger- info('click Event:', $event- getData());\n    }\n\n    public function bounce(CallbackEvent $event){\n        $this- logger- info('bounce Event:', $event- getData());\n    }\n\n    public function spam(CallbackEvent $event){\n        $this- logger- info('spam Event:', $event- getData());\n    }\n\n    public function blocked(CallbackEvent $event){\n        $this- logger- info('blocked Event:', $event- getData());\n    }\n\n    public function unsub(CallbackEvent $event){\n        $this- logger- info('unsub Event:', $event- getData());\n    }\n\n}", 
            "title": "1- create an Event Listener"
        }, 
        {
            "location": "/event-api/#2-register-the-listener-into-servicesyml", 
            "text": "services:\n    app.listener.mailjet.webhook:\n        class: AppBundle\\Listener\\MailjetEventListener\n        tags:\n            - { name: kernel.event_subscriber }\n        arguments:\n            - @logger", 
            "title": "2- Register the listener into services.yml"
        }, 
        {
            "location": "/event-api/#3-test-with-ngrok-or-other-localhost-tunnel", 
            "text": "", 
            "title": "3- Test with ngrok (or other localhost tunnel)"
        }, 
        {
            "location": "/symfony-debug-toolbar/", 
            "text": "Symfony debug toolbar\n\n\nWhen Mailjet API is call, you can find Request data in Symfony debug toolbar.\n\n\n\n\nWhen you click on Mailjet icon on toolbar, you can have debug data on Mailjet API calls executed.\n\n\n\n\nIt's a powerfull built-in tool you can use without moderation!", 
            "title": "Symfony Debug Toolbar"
        }, 
        {
            "location": "/symfony-debug-toolbar/#symfony-debug-toolbar", 
            "text": "When Mailjet API is call, you can find Request data in Symfony debug toolbar.   When you click on Mailjet icon on toolbar, you can have debug data on Mailjet API calls executed.   It's a powerfull built-in tool you can use without moderation!", 
            "title": "Symfony debug toolbar"
        }, 
        {
            "location": "/tests/", 
            "text": "Tests\n\n\n\n\nhttp://www.phpspec.net/\n\n\n\n\nUnit tests\n\n\nbin/phpspec run --fpretty --verbose\n\n\n\nEvents (Webhook) tests\n\n\nuse ngrok or \nhttp://requestb.in/\n\n\nDebug/dev mode\n\n\nThe best solution for debug or dev environment is to create a new MailJet account and use the API key of this new \"debug/dev\" free Mailjet account.", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#tests", 
            "text": "http://www.phpspec.net/", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#unit-tests", 
            "text": "bin/phpspec run --fpretty --verbose", 
            "title": "Unit tests"
        }, 
        {
            "location": "/tests/#events-webhook-tests", 
            "text": "use ngrok or  http://requestb.in/", 
            "title": "Events (Webhook) tests"
        }, 
        {
            "location": "/tests/#debugdev-mode", 
            "text": "The best solution for debug or dev environment is to create a new MailJet account and use the API key of this new \"debug/dev\" free Mailjet account.", 
            "title": "Debug/dev mode"
        }, 
        {
            "location": "/build-documentation/", 
            "text": "Build documentation\n\n\nYou can read files in the folder \nsrc/Resources/doc\n or you can compile the documentation with MkDocs.\n\n\nMkDocs\n\n\n\n\nInstall Python 2.7 and Pip 1.5\n\n\nInstall MkDocs: \npip install mkdocs\n\n\nInstall pymdown-extension: \npip install pymdown-extensions\n\n\nCompile the doc: \nmkdocs build\n\n\nPreview the doc: \nmkdocs serve\n at \nhttp://127.0.0.1:8000\n\n\n\n\nDeploy to gh-pages\n\n\nDocumentation is deployed here: \nhttps://mailjet.github.io/mailjetBundle/\n\n\nIn order to deploy a new version of documentation: \nmkdocs gh-deploy", 
            "title": "Build Documentation"
        }, 
        {
            "location": "/build-documentation/#build-documentation", 
            "text": "You can read files in the folder  src/Resources/doc  or you can compile the documentation with MkDocs.", 
            "title": "Build documentation"
        }, 
        {
            "location": "/build-documentation/#mkdocs", 
            "text": "Install Python 2.7 and Pip 1.5  Install MkDocs:  pip install mkdocs  Install pymdown-extension:  pip install pymdown-extensions  Compile the doc:  mkdocs build  Preview the doc:  mkdocs serve  at  http://127.0.0.1:8000", 
            "title": "MkDocs"
        }, 
        {
            "location": "/build-documentation/#deploy-to-gh-pages", 
            "text": "Documentation is deployed here:  https://mailjet.github.io/mailjetBundle/  In order to deploy a new version of documentation:  mkdocs gh-deploy", 
            "title": "Deploy to gh-pages"
        }, 
        {
            "location": "/mailjet-doc/", 
            "text": "Mailjet Documentation\n\n\n\n\nAPI Guides\n\n\nAPI Reference\n\n\nSwitch from Mandrill\n\n\nAutomation (FR)", 
            "title": "Mailjet Doc"
        }, 
        {
            "location": "/mailjet-doc/#mailjet-documentation", 
            "text": "API Guides  API Reference  Switch from Mandrill  Automation (FR)", 
            "title": "Mailjet Documentation"
        }, 
        {
            "location": "/CONTRIBUTING/", 
            "text": "CONTRIBUTING\n\n\n\n\nContributing to Open Source guide\n\n\n\n\nSteps\n\n\n\n\nCreate an Issue\n\n\nPull Request\n\n\nMerge \\o/\n\n\n\n\nContributors\n\n\n\n\nOriginal author: \nTitouan BENOIT\n\n\nMailjet API", 
            "title": "Contributing"
        }, 
        {
            "location": "/CONTRIBUTING/#contributing", 
            "text": "Contributing to Open Source guide", 
            "title": "CONTRIBUTING"
        }, 
        {
            "location": "/CONTRIBUTING/#steps", 
            "text": "Create an Issue  Pull Request  Merge \\o/", 
            "title": "Steps"
        }, 
        {
            "location": "/CONTRIBUTING/#contributors", 
            "text": "Original author:  Titouan BENOIT  Mailjet API", 
            "title": "Contributors"
        }
    ]
}