{
    "docs": [
        {
            "location": "/", 
            "text": "Mailjet Bundle\n\n\n\n\n\n\n\n\n\n\n\n\nSymfony bundle for handling Mailjet API V3 using this wrapper: \nhttps://github.com/mailjet/mailjet-apiv3-php\n\n\n\ud83d\udea7 \nWORK IN PROGRESS...\n \ud83d\udea7\n\n\nFeatures\n\n\n\n\n Retrieve \n\\Mailjet\\Client\n to make custom Mailjet API V3 requests\n\n\n \nSwiftMailer Transport integration\n\n\n Synchronize Contact Metadata (Contact Properties) with your config\n\n\n Synchronize your user with MailJet contact list\n\n\n Use your own userProvider (basic \nFosContactProvider\n included to interface with FosUserBundle)\n\n\n Use lifecycle event to subscribe/unsubscribe/update/delete user from a contact List \n(need more tests)\n\n\n Register Event API - real time notifications (webhook) \n(need more tests)\n\n\n\n\nSetup\n\n\nAdd bundle to your project:\n\n\ncomposer require welp/mailjet-bundle\n\n\n\nAdd \nWelp\\MailjetBundle\\WelpMailjetBundle\n to your \nAppKernel.php\n:\n\n\n$bundles = [\n    // ...\n    new Welp\\MailjetBundle\\WelpMailjetBundle(),\n];\n\n\n\nMinimal Configuration\n\n\nIn your \nconfig.yml\n:\n\n\nwelp_mailjet:\n    api_key:    \n%mailjet_api_key%\n\n    secret_key: \n%mailjet_secret_key%\n\n\n\nToDo\n\n\n\n\nMoar tests...\n\n\nhandle when user changes email\n\n\nUnit Synchronize User\n\n\nDebug/Sandbox configuration mode\n\n\n\n\nMailJet issues\n\n\n\n\nHow to change user email? (workaround: remove old, add new...)\n\n\nEvent API/webhook: how to synchronize specific contact subscribe event ? (available sent, open, click, bounce, spam, blocked, unsub)\n\n\nWhen user unsubscribe from external link ??\n\n\nWhen user resubscribe to list (widget or admin)\n\n\n\n\n\n\n\n\nContributing\n\n\nIf you want to contribute to this project, look at \nover here", 
            "title": "Home"
        }, 
        {
            "location": "/#mailjet-bundle", 
            "text": "Symfony bundle for handling Mailjet API V3 using this wrapper:  https://github.com/mailjet/mailjet-apiv3-php  \ud83d\udea7  WORK IN PROGRESS...  \ud83d\udea7", 
            "title": "Mailjet Bundle"
        }, 
        {
            "location": "/#features", 
            "text": "Retrieve  \\Mailjet\\Client  to make custom Mailjet API V3 requests    SwiftMailer Transport integration   Synchronize Contact Metadata (Contact Properties) with your config   Synchronize your user with MailJet contact list   Use your own userProvider (basic  FosContactProvider  included to interface with FosUserBundle)   Use lifecycle event to subscribe/unsubscribe/update/delete user from a contact List  (need more tests)   Register Event API - real time notifications (webhook)  (need more tests)", 
            "title": "Features"
        }, 
        {
            "location": "/#setup", 
            "text": "Add bundle to your project:  composer require welp/mailjet-bundle  Add  Welp\\MailjetBundle\\WelpMailjetBundle  to your  AppKernel.php :  $bundles = [\n    // ...\n    new Welp\\MailjetBundle\\WelpMailjetBundle(),\n];", 
            "title": "Setup"
        }, 
        {
            "location": "/#minimal-configuration", 
            "text": "In your  config.yml :  welp_mailjet:\n    api_key:     %mailjet_api_key% \n    secret_key:  %mailjet_secret_key%", 
            "title": "Minimal Configuration"
        }, 
        {
            "location": "/#todo", 
            "text": "Moar tests...  handle when user changes email  Unit Synchronize User  Debug/Sandbox configuration mode", 
            "title": "ToDo"
        }, 
        {
            "location": "/#mailjet-issues", 
            "text": "How to change user email? (workaround: remove old, add new...)  Event API/webhook: how to synchronize specific contact subscribe event ? (available sent, open, click, bounce, spam, blocked, unsub)  When user unsubscribe from external link ??  When user resubscribe to list (widget or admin)", 
            "title": "MailJet issues"
        }, 
        {
            "location": "/#contributing", 
            "text": "If you want to contribute to this project, look at  over here", 
            "title": "Contributing"
        }, 
        {
            "location": "/setup/", 
            "text": "Setup\n\n\nAdd bundle to your project:\n\n\ncomposer require welp/mailjet-bundle\n\n\n\nAdd \nWelp\\MailjetBundle\\WelpMailjetBundle\n to your \nAppKernel.php\n:\n\n\n$bundles = [\n    // ...\n    new Welp\\MailjetBundle\\WelpMailjetBundle(),\n];\n\n\n\nMinimal Configuration\n\n\nIn your \nconfig.yml\n:\n\n\nwelp_mailjet:\n    api_key:    \n%mailjet_api_key%\n\n    secret_key: \n%mailjet_secret_key%\n\n\n\nMore configuration", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#setup", 
            "text": "Add bundle to your project:  composer require welp/mailjet-bundle  Add  Welp\\MailjetBundle\\WelpMailjetBundle  to your  AppKernel.php :  $bundles = [\n    // ...\n    new Welp\\MailjetBundle\\WelpMailjetBundle(),\n];", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#minimal-configuration", 
            "text": "In your  config.yml :  welp_mailjet:\n    api_key:     %mailjet_api_key% \n    secret_key:  %mailjet_secret_key%  More configuration", 
            "title": "Minimal Configuration"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nYou need to have Mailjet account available\n\n\nconfig.yml\n\n\nDefine a configuration in your \nconfig.yml\n:\n\n\nwelp_mailjet:\n    api_key:    \n%mailjet_api_key%\n\n    secret_key: \n%mailjet_secret_key%\n\n    # route name to handle the callback\n    event_endpoint_route: app_event_endpoint_route\n    # secret to secure callback\n    event_endpoint_token: \nsecretCode12345678\n\n    lists:\n        listId1:\n            # provider used in full synchronization\n            contact_provider: 'yourapp.provider1'\n        listId2:\n            contact_provider: 'yourapp.provider2'\n        # ...\n    contact_metadata:\n        -\n            name: firstname\n            datatype: str\n        -\n            name: lastname\n            datatype: str\n        -\n            name: postalcode\n            datatype: int\n        -\n            name: rank\n            datatype: int\n        -\n            name: hasavatar\n            datatype: bool\n        -\n            name: lastlogin\n            datatype: datetime\n        -\n            name: createdat\n            datatype: datetime\n        -\n            name: birthdate\n            datatype: datetime\n        # ...\n\n\n\n\nWhere \nlistIdX\n is the list id of your Mailjet lists, and \nyourapp.providerX\n is the key of your provider's service that will provide the contacts that need to be synchronized in Mailjet. See the documentation on create \nyour own Contact provider\n.\n\n\nContact Metadata (Contact Properties)\n\n\n\n\nMailjet FAQ\n\n\nMailjet Documentation\n\n\n\n\nYou can find all parameters in Mailjet documentation.\n\n\nExample:\n\n\ncontact_metadata:\n    -\n        name: firstname\n        datatype: str\n    -\n        name: lastname\n        datatype: str\n    -\n        name: organisation\n        datatype: str\n    -\n        name: town\n        datatype: str\n    -\n        name: postalcode\n        datatype: int\n    -\n        name: gender\n        datatype: str\n    -\n        name: rank\n        datatype: int\n    -\n        name: hasavatar\n        datatype: bool\n    -\n        name: lastlogin\n        datatype: datetime\n    -\n        name: createdat\n        datatype: datetime\n    -\n        name: birthdate\n        datatype: datetime\n\n\n\nAvailable datatype: \nstr, int, float, bool, datetime", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "You need to have Mailjet account available", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configyml", 
            "text": "Define a configuration in your  config.yml :  welp_mailjet:\n    api_key:     %mailjet_api_key% \n    secret_key:  %mailjet_secret_key% \n    # route name to handle the callback\n    event_endpoint_route: app_event_endpoint_route\n    # secret to secure callback\n    event_endpoint_token:  secretCode12345678 \n    lists:\n        listId1:\n            # provider used in full synchronization\n            contact_provider: 'yourapp.provider1'\n        listId2:\n            contact_provider: 'yourapp.provider2'\n        # ...\n    contact_metadata:\n        -\n            name: firstname\n            datatype: str\n        -\n            name: lastname\n            datatype: str\n        -\n            name: postalcode\n            datatype: int\n        -\n            name: rank\n            datatype: int\n        -\n            name: hasavatar\n            datatype: bool\n        -\n            name: lastlogin\n            datatype: datetime\n        -\n            name: createdat\n            datatype: datetime\n        -\n            name: birthdate\n            datatype: datetime\n        # ...  Where  listIdX  is the list id of your Mailjet lists, and  yourapp.providerX  is the key of your provider's service that will provide the contacts that need to be synchronized in Mailjet. See the documentation on create  your own Contact provider .", 
            "title": "config.yml"
        }, 
        {
            "location": "/configuration/#contact-metadata-contact-properties", 
            "text": "Mailjet FAQ  Mailjet Documentation   You can find all parameters in Mailjet documentation.  Example:  contact_metadata:\n    -\n        name: firstname\n        datatype: str\n    -\n        name: lastname\n        datatype: str\n    -\n        name: organisation\n        datatype: str\n    -\n        name: town\n        datatype: str\n    -\n        name: postalcode\n        datatype: int\n    -\n        name: gender\n        datatype: str\n    -\n        name: rank\n        datatype: int\n    -\n        name: hasavatar\n        datatype: bool\n    -\n        name: lastlogin\n        datatype: datetime\n    -\n        name: createdat\n        datatype: datetime\n    -\n        name: birthdate\n        datatype: datetime  Available datatype:  str, int, float, bool, datetime", 
            "title": "Contact Metadata (Contact Properties)"
        }, 
        {
            "location": "/swiftmailer/", 
            "text": "Mailjet SwiftMailer Transport\n\n\nConfiguration\n\n\n    # Swiftmailer Configuration\n    swiftmailer:\n        transport: welp_mailjet\n\n\n\nDocumentation\n\n\nhere", 
            "title": "SwiftMailer"
        }, 
        {
            "location": "/swiftmailer/#mailjet-swiftmailer-transport", 
            "text": "", 
            "title": "Mailjet SwiftMailer Transport"
        }, 
        {
            "location": "/swiftmailer/#configuration", 
            "text": "# Swiftmailer Configuration\n    swiftmailer:\n        transport: welp_mailjet", 
            "title": "Configuration"
        }, 
        {
            "location": "/swiftmailer/#documentation", 
            "text": "here", 
            "title": "Documentation"
        }, 
        {
            "location": "/contact-provider/", 
            "text": "Contact Provider\n\n\nAfter \nconfiguring your lists\n in \nconfig.yml\n, you need to create at least one \nProvider\n that will be used by the SyncUser command.\nYour provider should be accessible via a service key (the same you reference in \ncontact_provider\n in your configuration file):\n\n\n    services:\n        yourapp.mailjet.contact_provider1:\n            class: YourApp\\AppBundle\\Mailjet\\MyContactProvider\n            arguments: [@yourapp.user.repository]\n\n\n\nYou provider class should implement \nWelp\\MailjetBundle\\Provider\\ProviderInterface\n and the method \ngetContacts\n must return an array of \nWelp\\MailjetBundle\\Model\\Contact\n objects.\n\n\nExample\n\n\nHere is an example of ContactProvider:\n\n\n?php\n\nnamespace YourApp\\App\\Mailjet;\n\nuse Welp\\MailjetBundle\\Provider\\ProviderInterface;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\nuse YourApp\\Model\\User\\UserRepository;\nuse YourApp\\Model\\User\\User;\n\nclass ExampleContactProvider implements ProviderInterface\n{\n\n    const PROP_NICKNAME =           'nickname';\n    const PROP_GENDER =             'gender';\n    const PROP_CITY =               'city';\n    const PROP_BIRTHDATE =          'birthdate';\n    const PROP_LAST_ACTIVITY_DATE = 'last_activity';\n    const PROP_REGISTRATION_DATE =  'registration_date';\n\n    protected $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this-\nuserRepository = $userRepository;\n    }\n\n    public function getContacts()\n    {\n        $users = $this-\nuserRepository-\nfindUsers();\n\n        $contacts = array_map(function(User $user) {\n            $userProperties = [\n                self::PROP_NICKNAME =\n $user-\ngetNickname(),\n                self::PROP_GENDER =\n $user-\ngetGender(),\n                self::PROP_CITY =\n $user-\ngetCity(),\n                self::PROP_BIRTHDATE =\n $user-\ngetBirthday() ? $user-\ngetBirthday()-\nformat('Y-m-d') : null,\n                self::PROP_LAST_ACTIVITY_DATE =\n $user-\ngetLastActivity() ? $user-\ngetLastActivity()-\nformat('Y-m-d') : null\n                self::PROP_REGISTRATION_DATE =\n $user-\ngetRegistrateAt() ? $user-\ngetRegistrateAt()-\nformat('Y-m-d') : null\n            ];\n\n            $contact = new Contact($user-\ngetEmail(), $user-\ngetUsername(), $userProperties);\n\n            return $contact;\n        }, $users);\n\n        return $contacts;\n    }\n}\n\n\n\nFosContactProvider\n\n\nWe also provide a ready to use provider for FosUserBundle: \nFosContactProvider\n. You just need to register the service into your app:\n\n\n    services:\n        yourapp.mailjet.fos_contact_provider:\n            class: Welp\\MailjetBundle\\Provider\\FosContactProvider\n            arguments: [@fos_user.user_manager]\n\n\n\nAfter this, don't forget to add the service key for your list into your \nconfig.yml\n:\n\n\n    ...\n    listId1:\n        contact_provider: 'yourapp.mailjet.fos_contact_provider'\n\n\n\nNote: You need to have \nenabled\n and \nlastlogin\n in your contact properties", 
            "title": "Contact Provider"
        }, 
        {
            "location": "/contact-provider/#contact-provider", 
            "text": "After  configuring your lists  in  config.yml , you need to create at least one  Provider  that will be used by the SyncUser command.\nYour provider should be accessible via a service key (the same you reference in  contact_provider  in your configuration file):      services:\n        yourapp.mailjet.contact_provider1:\n            class: YourApp\\AppBundle\\Mailjet\\MyContactProvider\n            arguments: [@yourapp.user.repository]  You provider class should implement  Welp\\MailjetBundle\\Provider\\ProviderInterface  and the method  getContacts  must return an array of  Welp\\MailjetBundle\\Model\\Contact  objects.", 
            "title": "Contact Provider"
        }, 
        {
            "location": "/contact-provider/#example", 
            "text": "Here is an example of ContactProvider:  ?php\n\nnamespace YourApp\\App\\Mailjet;\n\nuse Welp\\MailjetBundle\\Provider\\ProviderInterface;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\nuse YourApp\\Model\\User\\UserRepository;\nuse YourApp\\Model\\User\\User;\n\nclass ExampleContactProvider implements ProviderInterface\n{\n\n    const PROP_NICKNAME =           'nickname';\n    const PROP_GENDER =             'gender';\n    const PROP_CITY =               'city';\n    const PROP_BIRTHDATE =          'birthdate';\n    const PROP_LAST_ACTIVITY_DATE = 'last_activity';\n    const PROP_REGISTRATION_DATE =  'registration_date';\n\n    protected $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this- userRepository = $userRepository;\n    }\n\n    public function getContacts()\n    {\n        $users = $this- userRepository- findUsers();\n\n        $contacts = array_map(function(User $user) {\n            $userProperties = [\n                self::PROP_NICKNAME =  $user- getNickname(),\n                self::PROP_GENDER =  $user- getGender(),\n                self::PROP_CITY =  $user- getCity(),\n                self::PROP_BIRTHDATE =  $user- getBirthday() ? $user- getBirthday()- format('Y-m-d') : null,\n                self::PROP_LAST_ACTIVITY_DATE =  $user- getLastActivity() ? $user- getLastActivity()- format('Y-m-d') : null\n                self::PROP_REGISTRATION_DATE =  $user- getRegistrateAt() ? $user- getRegistrateAt()- format('Y-m-d') : null\n            ];\n\n            $contact = new Contact($user- getEmail(), $user- getUsername(), $userProperties);\n\n            return $contact;\n        }, $users);\n\n        return $contacts;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/contact-provider/#foscontactprovider", 
            "text": "We also provide a ready to use provider for FosUserBundle:  FosContactProvider . You just need to register the service into your app:      services:\n        yourapp.mailjet.fos_contact_provider:\n            class: Welp\\MailjetBundle\\Provider\\FosContactProvider\n            arguments: [@fos_user.user_manager]  After this, don't forget to add the service key for your list into your  config.yml :      ...\n    listId1:\n        contact_provider: 'yourapp.mailjet.fos_contact_provider'  Note: You need to have  enabled  and  lastlogin  in your contact properties", 
            "title": "FosContactProvider"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nSynchronize Contact Metadata (Contact Properties)\n\n\nContact Metadata (or Contact Properties) are values you can add to your contacts (for example firstname, birthdate, isenabled, ...).\nYou can use these metadata in your newsletters or to create segments out of them.\n\n\nThis bundle provides a simple way to configure and synchronize these metadata with your Mailjet account.\n\n\nYou just need to configure in your config.yml your \ncontact_metadata\n: \nsee the configuration\n.\n\n\nFinally, you can use this command to synchronize your config with Mailjet:\n\n\nphp app/console welp:mailjet:contactmetadata-sync\n\n\n\nFull synchronization with command\n\n\nYou can synchronize all users of your project with a Mailjet list at once by calling the Symfony command:\n\n\nphp app/console welp:mailjet:user-sync\n\n\n\nIt will get all your User throught your Contact Provider and will add/update all your User to the configured list.\n\n\nNOTE: you must have configured and created \nyour own contact provider\n.\n\n\nUnit synchronization with events\n\n\nIf you want realtime synchronization, you can dispatch custom events on your controllers/managers (or anywhere). The subscribe event can be used both for adding a new contact or updating an existing one. You can fired these events to trigger sync with Mailjet:\n\n\n    ContactEvent::EVENT_SUBSCRIBE = 'welp.mailjet.subscribe';\n    ContactEvent::EVENT_UNSUBSCRIBE = 'welp.mailjet.unsubscribe';\n    ContactEvent::EVENT_UPDATE = 'welp.mailjet.update';\n    ContactEvent::EVENT_DELETE = 'welp.mailjet.delete';\n    // NOT IMPLETENTED YET // ContactEvent::EVENT_CHANGE_EMAIL = 'welp.mailjet.change_email';\n\n\n\nSubscribe new User\n\n\nHere is an example of a subscribe event dispatch:\n\n\n?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function newUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail(), $user-\ngetNickname(), [\n        'firstname' =\n $user-\ngetFirstname(),\n        'lastname' =\n $user-\ngetLastname(),\n        'city' =\n $user-\ngetCity(),\n        'language' =\n 'fr'\n    ]);\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_SUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nUnsubscribe a User\n\n\nUnsubscribe is simpler, you only need the email:\n\n\n?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function unsubscribeUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail());\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_UNSUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nUpdate a User\n\n\nIf your User changes his information, you can sync with MailChimp:\n\n\n?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function updateUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail(), $user-\ngetNickname(), [\n        'firstname' =\n $user-\ngetFirstname(),\n        'lastname' =\n $user-\ngetLastname(),\n        'city' =\n $user-\ngetCity(),\n        'language' =\n 'fr'\n    ]);\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_UPDATE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nNote: we can't change the address email of a user... MailJet API V3 doesn't permit it so far.\n\n\nDelete a User\n\n\nAnd finally delete a User:\n\n\n?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function deleteUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user-\ngetEmail());\n\n    $this-\ncontainer-\nget('event_dispatcher')-\ndispatch(\n        ContactEvent::EVENT_DELETE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}\n\n\n\nChange User's email address\n\n\nNOT POSSIBLE YET...(WORKAROUND: remove old, add new)\n\n\nRetrieve Mailjet Client Object to make custom MailJet API V3 requests\n\n\nYou can also retrieve the MailJet Client Object which comes from the wrapper \nmailjet/mailjet-apiv3-php\n.\n\n\nThe service key is \nwelp_mailjet.api\n.\n\n\nExample:\n\n\n?php\n    use \\Mailjet\\Resources;\n\n    // in any controller action...\n    ...\n    $mailjet = $this-\ncontainer-\nget('welp_mailjet.api');\n\n    // Resources are all located in the Resources class\n    $response = $mailjet-\nget(Resources::$Contact);\n\n    /*\n      Read the response\n    */\n    if ($response-\nsuccess())\n      var_dump($response-\ngetData());\n    else\n      var_dump($response-\ngetStatus());\n\n    ...\n    // Send transactional emails\n\n    $body = [\n        'FromEmail' =\n \npilot@mailjet.com\n,\n        'FromName' =\n \nMailjet Pilot\n,\n        'Subject' =\n \nYour email flight plan!\n,\n        'Text-part' =\n \nDear passenger, welcome to Mailjet! May the delivery force be with you!\n,\n        'Html-part' =\n \nh3\nDear passenger, welcome to Mailjet!\n/h3\nbr /\nMay the delivery force be with you!\n,\n        'Recipients' =\n [['Email' =\n \npassenger@mailjet.com\n]]\n    ];\n\n    $response = $mailjet-\npost(Resources::$Email, ['body' =\n $body]);", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#synchronize-contact-metadata-contact-properties", 
            "text": "Contact Metadata (or Contact Properties) are values you can add to your contacts (for example firstname, birthdate, isenabled, ...).\nYou can use these metadata in your newsletters or to create segments out of them.  This bundle provides a simple way to configure and synchronize these metadata with your Mailjet account.  You just need to configure in your config.yml your  contact_metadata :  see the configuration .  Finally, you can use this command to synchronize your config with Mailjet:  php app/console welp:mailjet:contactmetadata-sync", 
            "title": "Synchronize Contact Metadata (Contact Properties)"
        }, 
        {
            "location": "/usage/#full-synchronization-with-command", 
            "text": "You can synchronize all users of your project with a Mailjet list at once by calling the Symfony command:  php app/console welp:mailjet:user-sync  It will get all your User throught your Contact Provider and will add/update all your User to the configured list.  NOTE: you must have configured and created  your own contact provider .", 
            "title": "Full synchronization with command"
        }, 
        {
            "location": "/usage/#unit-synchronization-with-events", 
            "text": "If you want realtime synchronization, you can dispatch custom events on your controllers/managers (or anywhere). The subscribe event can be used both for adding a new contact or updating an existing one. You can fired these events to trigger sync with Mailjet:      ContactEvent::EVENT_SUBSCRIBE = 'welp.mailjet.subscribe';\n    ContactEvent::EVENT_UNSUBSCRIBE = 'welp.mailjet.unsubscribe';\n    ContactEvent::EVENT_UPDATE = 'welp.mailjet.update';\n    ContactEvent::EVENT_DELETE = 'welp.mailjet.delete';\n    // NOT IMPLETENTED YET // ContactEvent::EVENT_CHANGE_EMAIL = 'welp.mailjet.change_email';", 
            "title": "Unit synchronization with events"
        }, 
        {
            "location": "/usage/#subscribe-new-user", 
            "text": "Here is an example of a subscribe event dispatch:  ?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function newUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail(), $user- getNickname(), [\n        'firstname' =  $user- getFirstname(),\n        'lastname' =  $user- getLastname(),\n        'city' =  $user- getCity(),\n        'language' =  'fr'\n    ]);\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_SUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}", 
            "title": "Subscribe new User"
        }, 
        {
            "location": "/usage/#unsubscribe-a-user", 
            "text": "Unsubscribe is simpler, you only need the email:  ?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function unsubscribeUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail());\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_UNSUBSCRIBE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}", 
            "title": "Unsubscribe a User"
        }, 
        {
            "location": "/usage/#update-a-user", 
            "text": "If your User changes his information, you can sync with MailChimp:  ?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function updateUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail(), $user- getNickname(), [\n        'firstname' =  $user- getFirstname(),\n        'lastname' =  $user- getLastname(),\n        'city' =  $user- getCity(),\n        'language' =  'fr'\n    ]);\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_UPDATE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}  Note: we can't change the address email of a user... MailJet API V3 doesn't permit it so far.", 
            "title": "Update a User"
        }, 
        {
            "location": "/usage/#delete-a-user", 
            "text": "And finally delete a User:  ?php\n\nuse Welp\\MailjetBundle\\Event\\ContactEvent;\nuse Welp\\MailjetBundle\\Model\\Contact;\n\n// ...\n\npublic function deleteUser(User $user)\n{\n    // ...\n\n    $contact = new Contact($user- getEmail());\n\n    $this- container- get('event_dispatcher')- dispatch(\n        ContactEvent::EVENT_DELETE,\n        new ContactEvent('your_list_id', $contact)\n    );\n}", 
            "title": "Delete a User"
        }, 
        {
            "location": "/usage/#change-users-email-address", 
            "text": "NOT POSSIBLE YET...(WORKAROUND: remove old, add new)", 
            "title": "Change User's email address"
        }, 
        {
            "location": "/usage/#retrieve-mailjet-client-object-to-make-custom-mailjet-api-v3-requests", 
            "text": "You can also retrieve the MailJet Client Object which comes from the wrapper  mailjet/mailjet-apiv3-php .  The service key is  welp_mailjet.api .  Example:  ?php\n    use \\Mailjet\\Resources;\n\n    // in any controller action...\n    ...\n    $mailjet = $this- container- get('welp_mailjet.api');\n\n    // Resources are all located in the Resources class\n    $response = $mailjet- get(Resources::$Contact);\n\n    /*\n      Read the response\n    */\n    if ($response- success())\n      var_dump($response- getData());\n    else\n      var_dump($response- getStatus());\n\n    ...\n    // Send transactional emails\n\n    $body = [\n        'FromEmail' =   pilot@mailjet.com ,\n        'FromName' =   Mailjet Pilot ,\n        'Subject' =   Your email flight plan! ,\n        'Text-part' =   Dear passenger, welcome to Mailjet! May the delivery force be with you! ,\n        'Html-part' =   h3 Dear passenger, welcome to Mailjet! /h3 br / May the delivery force be with you! ,\n        'Recipients' =  [['Email' =   passenger@mailjet.com ]]\n    ];\n\n    $response = $mailjet- post(Resources::$Email, ['body' =  $body]);", 
            "title": "Retrieve Mailjet Client Object to make custom MailJet API V3 requests"
        }, 
        {
            "location": "/event-api/", 
            "text": "Event API: real-time notifications (webhook)\n\n\nhttps://dev.mailjet.com/guides/#event-api-real-time-notifications", 
            "title": "Event API (webhook)"
        }, 
        {
            "location": "/event-api/#event-api-real-time-notifications-webhook", 
            "text": "https://dev.mailjet.com/guides/#event-api-real-time-notifications", 
            "title": "Event API: real-time notifications (webhook)"
        }, 
        {
            "location": "/tests/", 
            "text": "Tests\n\n\n\n\nhttp://www.phpspec.net/\n\n\n\n\nUnit tests\n\n\nbin/phpspec run --fpretty --verbose\n\n\n\nEvents(Webhook) tests\n\n\nuse ngrok and \nhttp://requestb.in/\n\n\nDebug/dev mode\n\n\nThe best solution to debug or dev environment is to create a new MailJet account and use the API key of this new \"debug/dev\" Mailjet account.", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#tests", 
            "text": "http://www.phpspec.net/", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#unit-tests", 
            "text": "bin/phpspec run --fpretty --verbose", 
            "title": "Unit tests"
        }, 
        {
            "location": "/tests/#eventswebhook-tests", 
            "text": "use ngrok and  http://requestb.in/", 
            "title": "Events(Webhook) tests"
        }, 
        {
            "location": "/tests/#debugdev-mode", 
            "text": "The best solution to debug or dev environment is to create a new MailJet account and use the API key of this new \"debug/dev\" Mailjet account.", 
            "title": "Debug/dev mode"
        }, 
        {
            "location": "/mailjet-doc/", 
            "text": "Mailjet Documentation\n\n\n\n\nAPI Guides\n\n\nAPI Reference\n\n\nSwitch from Mandrill\n\n\nAutomation (FR)", 
            "title": "Mailjet Doc"
        }, 
        {
            "location": "/mailjet-doc/#mailjet-documentation", 
            "text": "API Guides  API Reference  Switch from Mandrill  Automation (FR)", 
            "title": "Mailjet Documentation"
        }, 
        {
            "location": "/CONTRIBUTING/", 
            "text": "CONTRIBUTING\n\n\n\n\nContributing to Open Source guide\n\n\n\n\nSteps\n\n\n\n\nCreate an Issue\n\n\nPull Request\n\n\nMerge \\o/", 
            "title": "Contributing"
        }, 
        {
            "location": "/CONTRIBUTING/#contributing", 
            "text": "Contributing to Open Source guide", 
            "title": "CONTRIBUTING"
        }, 
        {
            "location": "/CONTRIBUTING/#steps", 
            "text": "Create an Issue  Pull Request  Merge \\o/", 
            "title": "Steps"
        }
    ]
}